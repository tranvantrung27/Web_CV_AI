@model IEnumerable<CV_AI.Models.JobPost>

@{
    var soLuongUngVienDict = ViewBag.SoLuongUngVienDict as Dictionary<int, int>;
    bool isQuanLyDangTin = soLuongUngVienDict != null;
    var savedJobIds = ViewBag.SavedJobIds as HashSet<int> ?? new HashSet<int>();
}

<div class="job-grid-container row g-4">
    @foreach (var job in Model)
    {
        string faviconUrl = Url.Content("~/images/logo/cv_logo.png");
        if (job.Employer != null && !string.IsNullOrWhiteSpace(job.Employer.CompanyWebsite)
        && (job.Employer.CompanyWebsite.StartsWith("http://") || job.Employer.CompanyWebsite.StartsWith("https://")))
        {
            var host = new Uri(job.Employer.CompanyWebsite).Host;
            faviconUrl = $"https://www.google.com/s2/favicons?domain={host}&sz=128";
        }

        var isSaved = savedJobIds.Contains(job.ID_JobPost);
        var savedClass = isSaved ? "favorited" : "";

        <div class="col-12 col-lg-6">
            <div class="job-card-new">
                <div class="job-logo-new">
                    <img src="@faviconUrl" alt="@(job.Employer?.CompanyName ?? "Company") Logo" />
                </div>
                <div class="job-info-new">
                    <h3 class="job-title-new">
                        <a asp-controller="Job" asp-action="Details" asp-route-id="@job.ID_JobPost">
                            @job.Title
                        </a>
                    </h3>
                    <p class="company-name-new">
                        @(string.IsNullOrWhiteSpace(job.Employer?.CompanyName) ? "Không rõ công ty" : job.Employer.CompanyName)
                    </p>
                    <div class="job-tags-new">
                        @if (!string.IsNullOrEmpty(job.Salary))
                        {
                            <span class="job-tag-new salary-tag-new">@job.Salary</span>
                        }
                        @if (!string.IsNullOrEmpty(job.Location))
                        {
                            <span class="job-tag-new location-tag-new">@job.Location</span>
                        }
                        @if (isQuanLyDangTin)
                        {
                            <span class="job-tag-new applicant-tag-new">
                               <i class="fas fa-users"></i> @(soLuongUngVienDict.ContainsKey(job.ID_JobPost) ? soLuongUngVienDict[job.ID_JobPost] : 0) ứng viên
                            </span>
                        }
                        @if (job.ID_JobPost % 3 == 0) { // Just for demonstration
                             <span class="job-tag-new hot-tag-new">NỔI BẬT</span>
                        }
                    </div>
                </div>
                <div class="job-actions-new">
                     @if (isQuanLyDangTin)
                    {
                        <a class="btn btn-sm btn-outline-success" href="@Url.Action("ManageApplicants", "Management", new { id = job.ID_JobPost })">
                            Quản lý
                        </a>
                    } else {
                        <button class="favorite-btn-new @savedClass" title="Lưu việc làm" type="button"
                                data-job-id="@job.ID_JobPost"
                                onclick="event.preventDefault(); event.stopPropagation(); toggleSaveJob(this);">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="@(isSaved ? "#ef4444" : "none")" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-heart"><path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path></svg>
                        </button>
                    }
                </div>
            </div>
        </div>
    }
</div>

<style>
/* Container for grid view */
.job-grid-container {
    margin: 20px auto;
    padding: 0;
}

/* New Job Card Styling */
.job-card-new {
    background: #fff;
    border-radius: 16px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    padding: 20px;
    display: flex;
    align-items: center;
    gap: 16px;
    transition: box-shadow 0.3s ease, transform 0.3s ease, border-color 0.3s ease;
    border: 1px solid #e5e7eb;
    height: 100%; /* Ensure cards in the same row have the same height */
}
.job-card-new:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 24px rgba(0,0,0,0.12);
    border-color: #00b894;
}

/* Logo */
.job-logo-new {
    width: 60px;
    height: 60px;
    min-width: 60px;
    border-radius: 12px;
    background: #fff;
    box-shadow: 0 1px 4px rgba(0,0,0,0.07);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    padding: 5px;
    border: 1px solid #f0f0f0;
}
.job-logo-new img {
    width: 100%;
    height: 100%;
    object-fit: contain;
}

/* Job Info Section */
.job-info-new {
    flex: 1;
}
.job-title-new {
    font-size: 1.15rem; /* 18px */
    font-weight: 600;
    margin-bottom: 4px;
}
.job-title-new a {
    color: #1f2937;
    text-decoration: none;
    transition: color 0.2s;
}
.job-title-new a:hover {
    color: #00b894;
}

.company-name-new {
    color: #6b7280;
    font-size: 0.95rem; /* 15px */
    margin-bottom: 12px;
}

/* Tags */
.job-tags-new {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    align-items: center;
}
.job-tag-new {
    background-color: #f3f4f6;
    color: #4b5563;
    border-radius: 8px;
    padding: 4px 12px;
    font-size: 0.85rem;
    font-weight: 500;
    white-space: nowrap;
}
.hot-tag-new {
    background: #fff1f2;
    color: #ef4444;
    font-weight: 600;
}
.salary-tag-new {
    color: #059669;
    background-color: #d1fae5;
    font-weight: 600;
}
.applicant-tag-new {
    color: #3b82f6;
    background-color: #dbeafe;
    font-weight: 600;
}

/* Actions section (favorite button) */
.job-actions-new {
    margin-left: auto;
    padding-left: 16px;
    align-self: center;
}
.favorite-btn-new {
    background: transparent;
    border: none;
    cursor: pointer;
    color: #9ca3af;
    padding: 0;
    transition: color 0.2s, transform 0.2s;
}
.favorite-btn-new:hover {
    color: #ef4444; /* red on hover */
    transform: scale(1.1);
}
.favorite-btn-new.favorited {
    color: #ef4444;
}
.favorite-btn-new.favorited svg {
    fill: #ef4444;
}
.favorite-btn-new svg {
    width: 24px;
    height: 24px;
}

</style>

<script>
if (typeof window.toggleSaveJob !== 'function') {
    window.toggleSaveJob = function (button) {
        const jobId = button.getAttribute('data-job-id');
        const heartIcon = button.querySelector('svg');
        const isSaved = button.classList.contains('favorited');
        fetch(`/Job/ToggleSaveJob/${jobId}`, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0]?.value
            }
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => {
                    if (err.redirectTo) {
                        window.location.href = err.redirectTo;
                    } else {
                        throw new Error('Lỗi không xác định.');
                    }
                });
            }
            return response.json();
        })
        .then(data => {
            if (data && data.success) {
                var badge = document.getElementById('fab-saved-count');
                let count = parseInt(badge?.textContent) || 0;
                if (isSaved) {
                    button.classList.remove('favorited');
                    heartIcon.style.fill = 'none';
                    // Nếu đang ở trang SavedJobs, xóa card khỏi DOM
                    if (window.location.pathname.toLowerCase().includes('/job/savedjobs')) {
                        const card = button.closest('.col-12, .col-12.col-lg-6');
                        if (card) {
                            card.style.transition = 'opacity 0.3s';
                            card.style.opacity = '0';
                            setTimeout(() => {
                                card.remove();
                                // Nếu không còn job nào, hiển thị thông báo
                                const grid = document.getElementById('saved-jobs-grid');
                                const emptyMsg = document.getElementById('no-saved-jobs-message');
                                if (grid && grid.querySelectorAll('.col-12, .col-12.col-lg-6').length === 0) {
                                    grid.style.display = 'none';
                                    if (emptyMsg) emptyMsg.style.display = 'block';
                                }
                                // Cập nhật badge số lượng đúng với số card còn lại
                                if (badge) {
                                    let newCount = grid ? grid.querySelectorAll('.col-12, .col-12.col-lg-6').length : 0;
                                    badge.textContent = newCount;
                                }
                            }, 300);
                        }
                    } else {
                        if (badge) badge.textContent = Math.max(0, count - 1);
                    }
                } else {
                    button.classList.add('favorited');
                    heartIcon.style.fill = '#ef4444';
                    if (badge) badge.textContent = count + 1;
                }
            }
        })
        .catch(error => alert('Lỗi khi lưu việc làm: ' + error));
    }
}
</script>